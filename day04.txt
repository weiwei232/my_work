day03回顾
函数
  def fn():
      pass

  fn  # 根据fn变量返回函数的引用关系
  fn()  # 返回调用函数后的引用关系

  v1 = fn   # v1 绑定 fn绑定的函数
  v2 = fn()  # v2 绑定 None

return 语句
  作用：
    终止当前函数的执行，返回到的调用的地方
    返回一个对象的引用关系

参数传递方式:
  位置传参(先)
     序列传参
  关键字传参(后)
     字典关键字传参

  例:
    def fn(a, b, c):
        pass
    fn(1, 2, 3)
    fn(a=1, c=3, b=2)
    fn(1, c=3, b=2)  # 对的
    fn(a=1, b=2, 3)

函数的形参的定义方式:
  位置形参
     星号元组形参
  命名关键字形参
     双星号字典形参

缺省参数:
  


day04笔记
全局变量和局部变量

局部变量:
  定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
  局部变量只能在函数内部使用
  局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁

全局变量
  定义在函数外部，模块内部的变量称为全局变量
  全局变量，所有的函数都可以直接访问（但函数内部不能将其直接赋值)

示例见:
  01_variable.py 

局部变量说明:
  1. 在函数内首次对变量赋值是创建局部变量,再次为变量赋值是修改局部变量的绑定关系
  2. 在函数内部的赋值语句不会对全局变量造成影响
  3. 局部变量只能在其被声明的函数内部访问，而全局变量可以在整个模块范围内访问

globals 和 locals 函数
   globals()  返回当前全局作用域内变量的字典
   locals()  返回当前局部作用域内为量的字典

示例:
  a = 1
  b = 2
  c = 3
  def f1(c, d):
      e = 300
      print("locals()返回: ", locals())
      print('globals()返回', globals())

  f1(100, 200)

函数变量
  函数名是变量，它在创建函数时绑定一个函数

示例:
  def f1():
      print("f1被调用")
  fx = f1
  fx()  # 等同于 f1()

示例2:
  def f1():
      print("hello")
  def f2():
      print("world")
  f1, f2 = f2, f1  # 交换两个变量的绑定关系
  f1()  # 请问打印结果是什么？ world?

一个函数可以作为另一个函数的参数传递
  示例:
    见: 03_function_args_give.py
    def f1():
        print("hello")
    def f2():
        print('world')

    def fx(fn):
        print(fn)
        fn()  # 调用谁?
    fx(f1)  # 此语句在做什么？
    fx(f2)

  示例见:
    04_function_args_give2.py


函数可以返回另一个函数(即:另一个函数可以返回一个函数)

示例见:
  05_return_function.py


练习：
  写一个计算器解释执行器:
    已知有如下函数:
      def myadd(x, y):  # 计算两个数相加
          return x + y
      def mymul(x, y):  # 计算两个数相乘
          return x * y

      def get_op(s): # s 代表操作字符串:'加','乘'
          此处自己实现

    主函数:
      def main():
         while True:
            s = input('请输入计算公式: ')#如:10 加 20
            L = s.split()
            a, s, b = L
            a, b = int(a), int(b)
            fn = get_op(s)
            print("结果是: ", fn(a, b))  # 结果是30

    
函数嵌套定义
  函数的嵌套定义是指一个函数里用def语句来创建其它的函数

示例:
  def fn_outer():
      print("fn_outer被调用!")
      def fn_inner():
          print("fn_inner被调用")
      fn_inner()
      fn_inner()
      print('fn_outter调用结束')

  fn_outer()


python 作用域
  作用域也叫名字空间，是访问变量时，查找变量名的范围空间

python的四个作用域 LEGB

局部作用域         Local function             L  
外部嵌套函数作用域  Enclosing Function Locals  E
函数定义所在模块(文件)的作用域  Global(Mudule)  G
python 内置模块的作用域       Builtin(python) B

示例:
   07_namespace.py

变量名的查找规则
　　L --> E  --> G  --> B
  在默认情况下，对变量名赋值会创建或改变本作用域内的变量


问题:
  v = 100
  def f():
      v = 200  希望此赋值语句操作的是全局变量v
  f()
  print(v)  # 200 怎么办？

global语句
 　作用:
    1.告诉解释器, global语句声明的一个或多个变量，这些变量的作用域为模块级的作用域，也称作全局变量
    2.全局声明(global)将赋值变量映身到模块文内部的作用域
  语法
    global 变量1, 变量2, ...
  示例:
    v = 100
    def fn():
        global v
        v = 200
    fn()
    print(v)  # 200 

  global说明
    1. 全局变量如果要在函数内部被赋值，则必须经过全局声明（否则会被认为是局部变量)
    2. 全局变量在函数内部不经过声明就可以直接访问
    3. 不能先声明局部的变量，再用global声明为全局变量，此做法不附合规则
    4. global 变量列表里的变量不能出现在此作用域内的形参列表里



nonlocal  语句
　　作用:
    告诉解释器,　nonlocal声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内的变量
　　语法:
    nonlocal 变量名1, 变量名2, ...
  示例见:
    10_nonlocal.py

nonlocal 说明
  1. nonlocal语句只能在被嵌套函数内部进行使用
  2. 访问nonlocal变量将对外部嵌套函数的作用域的变量进行操作
  3. 当有两层或两层以上的函数嵌套时，访问nonlocal变量只对最近一层的变量进行操作
  4. nonlocal语句的变量列表里的变量名，不能出现在此函数的参数列表中


lambda　表达式(又称匿名函数)
  作用:
    创建一个匿名函数对象
    同 def 类似，但不提供函数名
  语法:
    lambda [参数1, 参数2, ...]: 表达式
    [] 里的内容可以省略
  示例:
    def myadd(x, y):
        return x + y
    # 以上函数可以改写为:
    myadd = lambda x, y: x + y
    print('2 + 3 =', myadd(2, 3))

语法说明:
  1. lambda 只是一个表达式，它用来创建一个函数对象
  2. 当lambda表达式调用时，先执行冒号后(:)的表达式，并返回表达式的结果的引用
  3. lambda 表达式创建的函数只能包含一条"表达式"
  4. lambda 比函数简单，且可以随时创建和销毁，有利于减少程序的偶合度

练习:
  １．写一个lambda表达式，判断这个数的2次方+1是否能被5整除,如果能整除返回True, 否则返回False

  fx = lambda n: ....
  print(fx(3)) # True
  print(fx(4)) # False

  2. 写一个lambda表达式，求两个变量的最大值:
     def mymax(x, y):
         ....
     # 或用lambda
     mymax = lambda ....
     print(mymax(100, 200))  # 200

看懂下面的程序在做什么？
  def fx(f, x, y):
      print(f(x, y))
  fx((lambda a, b: a + b), 100, 200)
  fx((lambda a, b: a ** b), 3, 4)


eval()  和 exec()函数
eval()  函数
  格式:
    eval(source, global=None, locals=None)
  作用:
    把一个字符串当成一个表达式来执行，返回表达式执行后的结果
  示例:
    x = 100
    y = 200
    a = eval('x+y')
    print(a)


exec() 函数
  作用:
    把一个字符串当成程序来执行
  格式:
    exec(source, globals=None, locals=None)
  示例:
    x = 100
    y = 200
    s = 'z = x+y; print(z); del z; print("删除成功"'
    exec(s)  # 执行s绑定的语句

eval 和 exec的两个参数globals 和 locals
此两个参数是用来设置'表达式'或'程序'运行的全局变量和局部变量

示例:
  x = 100
  y = 200
  s = 'print(x, y, x + y)'
  exec(s)  # 100 200, 300
  exec(s, {'x': 10, 'y': 20})  # 10, 20, 30
  exec(s, {'x': 10}, {'x': 1, 'y': 2})  # 1 2 3
  exec(s, {'x': 10}, {'y': 2})  # 10 2 12



练习:
  1. 写一个函数mysum(n),要求给出一个数n,求 
     1 + 2 +3 + 4 + ..... + n 的和
    如:
      print(mysum(100))  # 5050
      print(mysum(10))  # 55

  2. 写一个函数myfac(n)来计算n!(n的阶乘)
    n! = 1*2*3*4*....*n
    如:
      print(myfac(5))  # 120
      print(myfac(4))  # 24
  3. 写一个函数，求
      1 + 2**3 + 3**3 + ... + n**n的和
      (n给个小点的数)
  4. 修改之前的学生信息管理程序，实现添加菜单和选择菜单操作功能:
     菜单:
       +-----------------------------+
       |  1) 添加学生信息              |
       |  2) 查看所有学生信息          |
       |  3) 修改学生的成绩            |
       |  4) 删除学生信息              |
       |  q) 退出                     |
       +-----------------------------+
     请选择: 1
       请输入姓名:....
     请选择: 3
       请输入修改学生的姓名: ....
    (要求每个功能都对应一个函数)

